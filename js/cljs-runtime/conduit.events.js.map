{"version":3,"file":"conduit.events.js","sources":["conduit/events.cljs"],"mappings":"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","names":["cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","db","conduit.events/set-user-interceptor","p__24239","p__24240","map__24241","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__24242","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","body","p__24138","p__24139","map__24140","vec__24141","slug","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","conduit.events.endpoint.cljs$core$IFn$_invoke$arity$variadic","params","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","tags","ajax.core/json-request-format","cljs.core/assoc-in","request-type","p__24145","p__24146","map__24147","vec__24148","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","p__24118","map__24119","hash","G__24334","ajax.core/json-response-format","conduit.db/default-db","local-store-user","js/location","p__24318","p__24319","map__24320","vec__24321","map__24324","user","props","G__24269","G__24111","re-frame.core/path","cljs.core/List","G__24152","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","coll","key","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","conduit.events/add-epoch","token","article","cljs.core/dec","username","set-page","page","registration","p__24201","p__24202","map__24203","vec__24204","p__24215","map__24216","response","conduit.events/index-by","comments","conduit.events/auth-header","favorited","p__24198","map__24199","p__24233","vec__24234","map__24237","conduit.events/remove-user-interceptor","profile","G__24218","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","G__24136","p__24335","vec__24336","map__24339","re-frame.core/after","conduit.db/remove-user-ls","G__24300","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__24261","G__24232","p__24190","p__24191","map__24192","vec__24193","p__24181","p__24182","map__24183","vec__24184","map__24187","p__24293","p__24294","map__24295","vec__24296","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","conduit.events/api-url","p__24327","p__24328","map__24329","vec__24330","p__24270","vec__24271","map__24274","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__24349","vec__24350","map__24353","p__24262","p__24263","map__24264","vec__24265","G__24208","p__24276","p__24277","map__24278","vec__24279","credentials","p__24173","p__24174","map__24175","vec__24176","comment-id","p__24284","p__24285","map__24286","vec__24287","map__24290","G__24180","p__24358","vec__24359","G__24166","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","articles-count","p__24209","vec__24210","map__24213","articles","p__24254","p__24255","map__24256","vec__24257","cljs.core/inc","G__24348","item","date","cljs-time.coerce/to-long","conduit.db/set-user-ls","G__24246","p__24153","vec__24154","map__24157","p__24247","p__24248","map__24249","vec__24250","comment","p__24355","map__24356","p__24225","p__24226","map__24227","vec__24228","G__24283","p__24159","p__24160","map__24161","vec__24162","p__24362","p__24363","map__24364","vec__24365","p__24127","p__24128","map__24129","vec__24130","map__24133","G__24197","G__24116","G__24117","re-frame.core/reg-fx","G__24123","re-frame.core/inject-cofx","cljs.core/Keyword","js/Error","re-frame.core/trim-v","G__24317","cljs.core/empty?","var_args","args__4500__auto__","len__4497__auto__","i__4498__auto__","argseq__4501__auto__","cljs.core/IndexedSeq","conduit.events/endpoint","seq24112","cljs.core/seq","p__24167","vec__24168","map__24171","p__24310","p__24311","map__24312","vec__24313","p__24341","p__24342","map__24343","vec__24344","p__24219","vec__24220","map__24223","p__24301","p__24302","map__24303","vec__24304","map__24307","p__24124","map__24125"],"sourcesContent":["(ns conduit.events\n  (:require\n   [conduit.db :refer [default-db set-user-ls remove-user-ls]]\n   [re-frame.core :refer [reg-event-db reg-event-fx reg-fx inject-cofx trim-v after path debug]]\n   [day8.re-frame.http-fx] ;; even if we don't use this require its existence will cause the :http-xhrio effect handler to self-register with re-frame\n   [ajax.core :refer [json-request-format json-response-format]]\n   [clojure.string :as str]\n   [cljs-time.coerce :refer [to-long]]))\n\n;; -- Interceptors --------------------------------------------------------------\n;; Every event handler can be \"wrapped\" in a chain of interceptors. Each of these\n;; interceptors can do things \"before\" and/or \"after\" the event handler is executed.\n;; They are like the \"middleware\" of web servers, wrapping around the \"handler\".\n;; Interceptors are a useful way of factoring out commonality (across event\n;; handlers) and looking after cross-cutting concerns like logging or validation.\n;;\n;; They are also used to \"inject\" values into the `coeffects` parameter of\n;; an event handler, when that handler needs access to certain resources.\n;;\n;; Each event handler can have its own chain of interceptors. Below we create\n;; the interceptor chain shared by all event handlers which manipulate user.\n;; A chain of interceptors is a vector.\n;; Explanation of `trim-v` is given further below.\n;;\n(def set-user-interceptor [(path :user)         ;; `:user` path within `db`, rather than the full `db`.\n                           (after set-user-ls)  ;; write user to localstore (after)\n                           trim-v])             ;; removes first (event id) element from the event vec\n\n;; After logging out clean up local-storage so that when a users refreshes\n;; the browser she/he is not automatically loged-in, and because it's a\n;; good practice to clean-up after yourself.\n;;\n(def remove-user-interceptor [(after remove-user-ls)])\n\n;; -- Helpers -----------------------------------------------------------------\n;;\n(def api-url \"https://conduit.productionready.io/api\")\n\n(defn endpoint [& params]\n  \"Concat any params to api-url separated by /\"\n  (str/join \"/\" (concat [api-url] params)))\n\n(defn auth-header [db]\n  \"Get user token and format for API authorization\"\n  (let [token (get-in db [:user :token])]\n    (if token\n      [:Authorization (str \"Token \" token)]\n      nil)))\n\n(defn add-epoch [date coll]\n  \"Takes date identifier and adds :epoch (cljs-time.coerce/to-long) timestamp to coll\"\n  (map (fn [item] (assoc item :epoch (to-long (date item)))) coll))\n\n(defn index-by [key coll]\n  \"Transform a coll to a map with a given key as a lookup value\"\n  (into {} (map (juxt key identity) (add-epoch :createdAt coll))))\n\n(reg-fx                                ;; register a new event handler to use with our -fx events\n :set-hash                             ;; this will be provided in a map for -fx events and\n (fn [{:keys [hash]}]                  ;; accept :hash as paramter, something like this: {:hash path}\n   (set! (.-hash js/location) hash)))  ;; so that we can set window.location.hash to path\n\n;; -- Event Handlers ----------------------------------------------------------\n;;\n(reg-event-fx    ;; usage: (dispatch [:initialise-db])\n :initialise-db  ;; sets up initial application state\n\n ;; the interceptor chain (a vector of interceptors)\n [(inject-cofx :local-store-user)]  ;; gets user from localstore, and puts into coeffects arg\n\n ;; the event handler (function) being registered\n (fn  [{:keys [local-store-user]} _]               ;; take 2 vals from coeffects. Ignore event vector itself.\n   {:db (assoc default-db :user local-store-user)}))  ;; what it returns becomes the new application state\n\n(reg-event-fx      ;; usage: (dispatch [:set-active-page {:page :home})\n :set-active-page  ;; triggered when the user clicks on a link that redirects to a another page\n (fn [{:keys [db]} [_ {:keys [page slug profile favorited]}]]  ;; destructure 2nd parameter to obtain keys\n   (let [set-page (assoc db :active-page page)]\n     (case page\n       ;; -- URL @ \"/\" --------------------------------------------------------\n       :home {:db set-page\n              :dispatch-n  (list (if (empty? (:user db))  ;; dispatch more than one event. When a user\n                                   [:get-articles]        ;; is NOT logged in we display all articles\n                                   [:get-feed-articles])  ;; otherwiser we get her/his feed articles\n                                 [:get-tags])}            ;; we also can't forget to get tags\n\n       ;; -- URL @ \"/login\" | \"/register\" | \"/settings\" -----------------------\n       (:login :register :settings) {:db set-page}  ;; when using case with multiple test constants that\n                                                    ;; do the same thing we can group them together\n                                                    ;; (:login :register :settings) {:db set-page} is the same as:\n                                                    ;; :login {:db set-page}\n                                                    ;; :register {:db set-page}\n                                                    ;; :settings {:db set-page}\n       ;; -- URL @ \"/editor\" --------------------------------------------------\n       :editor {:db       set-page\n                :dispatch (if slug                      ;; When we click article to edit we need\n                            [:set-active-article slug]  ;; to set it active or if we want to write\n                            [:reset-active-article])}   ;; a new article we reset\n\n       ;; -- URL @ \"/article/:slug\" -------------------------------------------\n       :article {:db       (assoc set-page\n                                  :active-article slug)\n                 :dispatch-n (list [:get-article-comments {:slug slug}]\n                                   [:get-user-profile {:profile (get-in db [:articles slug :author :username])}])}\n\n       ;; -- URL @ \"/:profile\" ------------------------------------------------\n       :profile {:db         (assoc set-page\n                                    :active-article slug)\n                 :dispatch-n (list [:get-user-profile {:profile profile}]  ;; again for dispatching multiple\n                                   [:get-articles {:author profile}])}     ;; events we can use :dispatch-n\n       ;; -- URL @ \"/:profile/favorites\" --------------------------------------\n       :favorited {:db       (assoc db :active-page :profile)             ;; even though we are at :favorited we still\n                   :dispatch [:get-articles {:favorited favorited}]}))))  ;; display :profile with :favorited articles\n\n(reg-event-db                     ;; usage: (dispatch [:reset-active-article])\n :reset-active-article            ;; triggered when the user enters new-article i.e. editor without slug\n (fn [db _]                       ;; 1st paramter in -db events is db, 2nd paramter not important therefore _\n   (dissoc db :active-article)))  ;; compute and return the new state\n\n(reg-event-fx  ;; usage: (dispatch [:set-active-article slug])\n :set-active-article\n (fn [{:keys [db]} [_ slug]]  ;; 1st parameter in -fx events is no longer just db. It is a map which contains a :db key.\n   {:db         (assoc db :active-article slug)             ;; The handler is returning a map which describes two side-effects:\n    :dispatch-n (list [:get-article-comments {:slug slug}]  ;; changne to app-state :db and future event in this case :dispatch-n\n                      [:get-user-profile {:profile (get-in db [:articles slug :author :username])}])}))\n\n;; -- GET Articles @ /api/articles --------------------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-articles {:limit 10 :tag \"tag-name\" ...}])\n :get-articles                  ;; triggered every time user request articles with differetn params\n (fn [{:keys [db]} [_ params]]  ;; params = {:limit 10 :tag \"tag-name\" ...}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\")                     ;; evaluates to \"api/articles/\"\n                 :params          params                                    ;; include params in the request\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-articles-success]                   ;; trigger get-articles-success event\n                 :on-failure      [:api-request-error :get-articles]}       ;; trigger api-request-error with :get-articles\n    :db          (-> db\n                     (assoc-in [:loading :articles] true)\n                     (assoc-in [:filter :offset] (:offset params))        ;; base on paassed params set a filter\n                     (assoc-in [:filter :tag] (:tag params))              ;; so that we can easily show and hide\n                     (assoc-in [:filter :author] (:author params))        ;; appropriate ui components\n                     (assoc-in [:filter :favorites] (:favorited params))\n                     (assoc-in [:filter :feed] false))}))                 ;; we need to disable filter by feed every time since it's not supported query param\n\n(reg-event-db\n :get-articles-success\n (fn [db [_ {articles :articles, articles-count :articlesCount}]]\n   (-> db\n       (assoc-in [:loading :articles] false)  ;; turn off loading flag for this event\n       (assoc :articles-count articles-count  ;; change app-state by adding articles-count\n              :articles (index-by :slug articles)))))  ;; and articles, which we index-by slug\n\n;; -- GET Article @ /api/articles/:slug ---------------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-article {:slug \"slug\"}])\n :get-article                   ;; triggered when a user upserts article i.e. is redirected to article page after saving an article\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"slug\"}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" (:slug params))      ;; evaluates to \"api/articles/:slug\"\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-article-success]                    ;; trigger get-article-success event\n                 :on-failure      [:api-request-error :get-article]}        ;; trigger api-request-error with :get-articles\n    :db          (assoc-in db [:loading :article] true)}))\n\n(reg-event-db\n :get-article-success\n (fn [db [_ {article :article}]]\n   (-> db\n       (assoc-in [:loading :article] false)\n       (assoc :articles (index-by :slug [article])))))\n\n;; -- POST/PUT Article @ /api/articles(/:slug) --------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:upsert-article article])\n :upsert-article                ;; when we update or insert (upsert) we are sending the same shape of information\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"article-slug\" :article {:body \"article body\"} }\n   {:db         (assoc-in db [:loading :article] true)\n    :http-xhrio {:method          (if (:slug params) :put :post)             ;; when we get a slug we'll update (:put) otherwise insert (:post)\n                 :uri             (if (:slug params)                         ;; Same logic as above but we go with different\n                                    (endpoint \"articles\" (:slug params))     ;; endpoint - one with :slug to update\n                                    (endpoint \"articles\"))                   ;; and another to insert\n                 :headers         (auth-header db)                           ;; get and pass user token obtained during login\n                 :params          (:article params)\n                 :format          (json-request-format)                      ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})   ;; json response and all keys to keywords\n                 :on-success      [:upsert-article-success]                  ;; trigger upsert-article-success event\n                 :on-failure      [:api-request-error :upsert-article]}}))   ;; trigger api-request-error with :upsert-article\n\n(reg-event-fx\n :upsert-article-success\n (fn [{:keys [db]} [_ {article :article}]]\n   {:db (-> db\n            (assoc-in [:loading :article] false)\n            (dissoc :comments)  ;; clean up any comments that we might have in db\n            (dissoc :errors)    ;; clean up any erros that we might have in db\n            (assoc :active-page :article\n                   :active-article (:slug article)))\n    :dispatch-n (list [:get-article {:slug (:slug article)}]             ;; when the users clicks save we fetch the new version\n                      [:get-article-comments {:slug (:slug article)}])   ;; of the article and comments from the server\n    :set-hash {:hash (str \"/articles/\" (:slug article))}}))  ;; after successful upsert i.e. no errors from the server we set url to /articles/:slug\n\n;; -- DELETE Article @ /api/articles/:slug ------------------------------------\n;;\n(reg-event-fx                 ;; usage (dispatch [:delete-article slug])\n :delete-article              ;; triggered when a user deletes an article\n (fn [{:keys [db]} [_ slug]]  ;; slug = {:slug \"article-slug\"}\n   {:db         (assoc-in db [:loading :article] true)\n    :http-xhrio {:method          :delete\n                 :uri             (endpoint \"articles\" slug)                ;; evaluates to \"api/articles/:slug\"\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :params          slug                                      ;; pass the article slug to delete\n                 :format          (json-request-format)                     ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:delete-article-success]                 ;; trigger get-articles-success\n                 :on-failure      [:api-request-error :delete-article]}}))  ;; trigger api-request-error with :delete-article\n\n(reg-event-fx\n :delete-article-success\n (fn [{:keys [db]} _]\n   {:db (-> db\n            (update-in [:articles] dissoc (:active-article db))\n            (assoc-in [:loading :article] false))\n    :dispatch [:set-active-page {:page :home}]\n    :set-hash {:hash \"/\"}}))\n\n;; -- GET Feed Articles @ /api/articles/feed ----------------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-feed-articles {:limit 10 :offset 0 ...}])\n :get-feed-articles             ;; triggered when Your Feed tab is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:offset 0 :limit 10}\n   {:http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" \"feed\")              ;; evaluates to \"api/articles/feed\"\n                 :params          params                                    ;; include params in the request\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-feed-articles-success]              ;; trigger get-articles-success event\n                 :on-failure      [:api-request-error :get-feed-articles]}  ;; trigger api-request-error with :get-feed-articles\n    :db          (-> db\n                     (assoc-in [:loading :articles] true)\n                     (assoc-in [:filter :offset] (:offset params))\n                     (assoc-in [:filter :tag] nil)                          ;; with feed-articles we turn off almost all\n                     (assoc-in [:filter :author] nil)                       ;; filters to make sure everythinig on the\n                     (assoc-in [:filter :favorites] nil)                    ;; client is displayed correctly.\n                     (assoc-in [:filter :feed] true))}))                    ;; This is the only one we need\n\n(reg-event-db\n :get-feed-articles-success\n (fn [db [_ {articles :articles, articles-count :articlesCount}]]\n   (-> db\n       (assoc-in [:loading :articles] false)\n       (assoc :articles-count articles-count\n              :articles (index-by :slug articles)))))\n\n;; -- GET Tags @ /api/tags ----------------------------------------------------\n;;\n(reg-event-fx          ;; usage (dispatch [:get-tags])\n :get-tags             ;; triggered when the home page is loaded\n (fn [{:keys [db]} _]  ;; second parameter is not important, therefore _\n   {:db         (assoc-in db [:loading :tags] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"tags\")                         ;; evaluates to \"api/tags\"\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:get-tags-success]                       ;; trigger get-tags-success event\n                 :on-failure      [:api-request-error :get-tags]}}))        ;; trigger api-request-error with :get-tags\n\n(reg-event-db\n :get-tags-success\n (fn [db [_ {tags :tags}]]\n   (-> db\n       (assoc-in [:loading :tags] false)\n       (assoc :tags tags))))\n\n;; -- GET Comments @ /api/articles/:slug/comments -----------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:get-article-comments {:slug \"article-slug\"}])\n :get-article-comments          ;; triggered when the article page is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:slug \"article-slug\"}\n   {:db         (assoc-in db [:loading :comments] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"articles\" (:slug params) \"comments\")  ;; evaluates to \"api/articles/:slug/comments\"\n                 :headers         (auth-header db)                                 ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})         ;; json response and all keys to keywords\n                 :on-success      [:get-article-comments-success]                  ;; trigger get-article-comments-success\n                 :on-failure      [:api-request-error :get-article-comments]}}))   ;; trigger api-request-error with :get-article-comments\n\n(reg-event-db\n :get-article-comments-success\n (fn [db [_ {comments :comments}]]\n   (-> db\n       (assoc-in [:loading :comments] false)\n       (assoc :comments (index-by :id comments))))) ;; another index-by, this time by id\n\n;; -- POST Comments @ /api/articles/:slug/comments ----------------------------\n;;\n(reg-event-fx                   ;; usage (dispatch [:post-comment comment])\n :post-comment                  ;; triggered when a user submits a comment\n (fn [{:keys [db]} [_ body]]    ;; body = {:body \"body\" }\n   {:db         (assoc-in db [:loading :comments] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"articles\" (:active-article db) \"comments\")  ;; evaluates to \"api/articles/:slug/comments\"\n                 :headers         (auth-header db)                                       ;; get and pass user token obtained during login\n                 :params          body\n                 :format          (json-request-format)                                  ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})               ;; json response and all keys to keywords\n                 :on-success      [:post-comment-success]                                ;; trigger get-articles-success\n                 :on-failure      [:api-request-error :comments]}}))                     ;; trigger api-request-error with :comments\n\n(reg-event-fx\n :post-comment-success\n (fn [{:keys [db]} [_ comment]]\n   {:db (-> db\n            (assoc-in [:loading :comments] false)\n            (assoc-in [:articles (:active-article db) :comments] comment)\n            (update-in [:errors] dissoc :comments)) ;; clean up errors, if any\n    :dispatch [:get-article-comments {:slug (:active-article db)}]}))\n\n;; -- DELETE Comments @ /api/articles/:slug/comments/:comment-id ----------------------\n;;\n(reg-event-fx                       ;; usage (dispatch [:delete-comment comment-id])\n :delete-comment                    ;; triggered when a user deletes an article\n (fn [{:keys [db]} [_ comment-id]]  ;; comment-id = 1234\n   {:db         (do\n                  (assoc-in db [:loading :comments] true)\n                  (assoc db :active-comment comment-id))\n    :http-xhrio {:method          :delete\n                 :uri             (endpoint \"articles\" (:active-article db) \"comments\" comment-id)  ;; evaluates to \"api/articles/:slug/comments/:comment-id\"\n                 :headers         (auth-header db)                                                  ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                             ;; make sure we are doing request format wiht json\n                 :response-format (json-response-format {:keywords? true})                          ;; json response and all keys to keywords\n                 :on-success      [:delete-comment-success]                                         ;; trigger delete-comment-success\n                 :on-failure      [:api-request-error :delete-comment]}}))                          ;; trigger api-request-error with :delete-comment\n\n(reg-event-db\n :delete-comment-success\n (fn [db _]\n   (-> db\n       (update-in [:comments] dissoc (:active-comment db)) ;; we could do another fetch of comments\n       (dissoc :active-comment)                            ;; but instead we just remove it from app-db\n       (assoc-in [:loading :comment] false))))             ;; which gives us much snappier ui\n\n;; -- GET Profile @ /api/profiles/:username -----------------------------------\n;;\n(reg-event-fx       ;; usage (dispatch [:get-user-profile {:profile \"profile\"}])\n :get-user-profile  ;; triggered when the profile page is loaded\n (fn [{:keys [db]} [_ params]]  ;; params = {:profile \"profile\"}\n   {:db         (assoc-in db [:loading :profile] true)\n    :http-xhrio {:method          :get\n                 :uri             (endpoint \"profiles\" (:profile params))     ;; evaluates to \"api/profiles/:profile\"\n                 :headers         (auth-header db)                            ;; get and pass user token obtained during login\n                 :response-format (json-response-format {:keywords? true})    ;; json response and all keys to keywords\n                 :on-success      [:get-user-profile-success]                 ;; trigger get-user-profile-success\n                 :on-failure      [:api-request-error :get-user-profile]}}))  ;; trigger api-request-error with :get-user-profile\n\n(reg-event-db\n :get-user-profile-success\n (fn [db [_ {profile :profile}]]\n   (-> db\n       (assoc-in [:loading :profile] false)\n       (assoc :profile profile))))\n\n;; -- POST Login @ /api/users/login -------------------------------------------\n;;\n(reg-event-fx                        ;; usage (dispatch [:login user])\n :login                              ;; triggered when a users submits login form\n (fn [{:keys [db]} [_ credentials]]  ;; credentials = {:email ... :password ...}\n   {:db         (assoc-in db [:loading :login] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"users\" \"login\")                ;; evaluates to \"api/users/login\"\n                 :params          {:user credentials}                       ;; {:user {:email ... :password ...}}\n                 :format          (json-request-format)                     ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:login-success]                          ;; trigger login-success\n                 :on-failure      [:api-request-error :login]}}))           ;; trigger api-request-error with :login\n\n(reg-event-fx\n :login-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to localStorage.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch-n (list [:complete-request :login]\n                      [:get-feed-articles {:tag nil :author nil :offset 0 :limit 10}])\n    :set-hash {:hash \"/\"}}))\n\n;; -- POST Registration @ /api/users ------------------------------------------\n;;\n(reg-event-fx                         ;; usage (dispatch [:register-user registration])\n :register-user                       ;; triggered when a users submits registration form\n (fn [{:keys [db]} [_ registration]]  ;; registration = {:username ... :email ... :password ...}\n   {:db         (assoc-in db [:loading :register-user] true)\n    :http-xhrio {:method          :post\n                 :uri             (endpoint \"users\")                        ;; evaluates to \"api/users\"\n                 :params          {:user registration}                      ;; {:user {:username ... :email ... :password ...}}\n                 :format          (json-request-format)                     ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:register-user-success]                  ;; trigger login-success\n                 :on-failure      [:api-request-error :register-user]}}))   ;; trigger api-request-error with :login-success\n\n(reg-event-fx\n :register-user-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to LocalStore.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch [:complete-request :register-user]\n    :set-hash {:hash \"/\"}}))\n\n;; -- PUT Update User @ /api/user ---------------------------------------------\n;;\n(reg-event-fx                         ;; usage (dispatch [:update-user user])\n :update-user                         ;; triggered when a users updates settgins\n (fn [{:keys [db]} [_ user]]          ;; user = {:img ... :username ... :bio ... :email ... :password ...}\n   {:db         (assoc-in db [:loading :update-user] true)\n    :http-xhrio {:method          :put\n                 :uri             (endpoint \"user\")                         ;; evaluates to \"api/user\"\n                 :params          {:user user}                              ;; {:user {:img ... :username ... :bio ... :email ... :password ...}}\n                 :headers         (auth-header db)                          ;; get and pass user token obtained during login\n                 :format          (json-request-format)                     ;; make sure our request is json\n                 :response-format (json-response-format {:keywords? true})  ;; json response and all keys to keywords\n                 :on-success      [:update-user-success]                    ;; trigger update-user-success\n                 :on-failure      [:api-request-error :update-user]}}))     ;; trigger api-request-error with :update-user\n\n(reg-event-fx\n :update-user-success\n ;; The standard set of interceptors, defined above, which we\n ;; use for all user-modifying event handlers. Looks after\n ;; writing user to LocalStore.\n ;; NOTE: this chain includes `path` and `trim-v`\n set-user-interceptor\n\n ;; The event handler function.\n ;; The \"path\" interceptor in `set-user-interceptor` means 1st parameter is the\n ;; value at `:user` path within `db`, rather than the full `db`.\n ;; And, further, it means the event handler returns just the value to be\n ;; put into `:user` path, and not the entire `db`.\n ;; So, a path interceptor makes the event handler act more like clojure's `update-in`\n (fn [{user :db} [{props :user}]]\n   {:db (merge user props)\n    :dispatch [:complete-request :update-user]}))\n\n;; -- Toggle follow user @ /api/profiles/:username/follow ---------------------\n;;\n(reg-event-fx                     ;; usage (dispatch [:toggle-follow-user username])\n :toggle-follow-user              ;; triggered when user clicks follow/unfollow button on profile page\n (fn [{:keys [db]} [_ username]]  ;; username = :username\n   {:db         (assoc-in db [:loading :toggle-follow-user] true)\n    :http-xhrio {:method          (if (get-in db [:profile :following]) :delete :post)  ;; check if we follow if yes DELETE, no POST\n                 :uri             (endpoint \"profiles\" username \"follow\")               ;; evaluates to \"api/profiles/:username/follow\"\n                 :headers         (auth-header db)                                      ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                 ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})              ;; json response and all keys to keywords\n                 :on-success      [:toggle-follow-user-success]                         ;; trigger toggle-follow-user-success\n                 :on-failure      [:api-request-error :login]}}))                       ;; trigger api-request-error with :update-user-success\n\n(reg-event-db  ;; usage: (dispatch [:toggle-follow-user-success])\n :toggle-follow-user-success\n (fn [db [_ {profile :profile}]]\n   (-> db\n       (assoc-in [:loading :toggle-follow-user] false)\n       (assoc-in [:profile :following] (:following profile)))))\n\n;; -- Toggle favorite article @ /api/articles/:slug/favorite ------------------\n;;\n(reg-event-fx                 ;; usage (dispatch [:toggle-favorite-article slug])\n :toggle-favorite-article     ;; triggered when user clicks favorite/unfavorite button on profile page\n (fn [{:keys [db]} [_ slug]]  ;; slug = :slug\n   {:db         (assoc-in db [:loading :toggle-favorite-article] true)\n    :http-xhrio {:method          (if (get-in db [:articles slug :favorited]) :delete :post)  ;; check if article is already favorite: yes DELETE, no POST\n                 :uri             (endpoint \"articles\" slug \"favorite\")                       ;; evaluates to \"api/articles/:slug/favorite\"\n                 :headers         (auth-header db)                                            ;; get and pass user token obtained during login\n                 :format          (json-request-format)                                       ;; make sure it's json\n                 :response-format (json-response-format {:keywords? true})                    ;; json response and all keys to keywords\n                 :on-success      [:toggle-favorite-article-success]                          ;; trigger toggle-favorite-article-success\n                 :on-failure      [:api-request-error :login]}}))                             ;; trigger api-request-error with :toggle-favorite-article\n\n(reg-event-db  ;; usage: (dispatch [:toggle-favorite-article-success])\n :toggle-favorite-article-success\n (fn [db [_ {article :article}]]\n   (let [slug (:slug article)\n         favorited (:favorited article)]\n     (-> db\n         (assoc-in [:loading :toggle-favorite-article] false)\n         (assoc-in [:articles slug :favorited] favorited)\n         (assoc-in [:articles slug :favoritesCount] (if favorited\n                                                      (:favoritesCount article inc)\n                                                      (:favoritesCount article dec)))))))\n\n;; -- Logout ------------------------------------------------------------------\n;;\n(reg-event-fx  ;; usage (dispatch [:logout])\n :logout\n ;; This interceptor, defined above, makes sure\n ;; that we clean up localStorage after logging-out\n ;; the user.\n remove-user-interceptor\n ;; The event handler function removes the user from\n ;; app-state = :db and sets the url to \"/\".\n (fn [{:keys [db]} _]\n   {:db      (dissoc db :user)  ;; remove user from db\n    :set-hash {:hash \"/\"}}))      ;; head back home after logout\n\n;; -- Request Handlers -----------------------------------------------------------\n;;\n(reg-event-db\n :complete-request         ;; when we complete a request we need to clean up\n (fn [db [_ request-type]] ;; few things so that our ui is nice and tidy\n   (assoc-in db [:loading request-type] false)))\n\n(reg-event-fx\n :api-request-error  ;; triggered when we get request-error from the server\n (fn [{:keys [db]} [_ request-type response]]  ;; destructure to obtain request-type and response\n   {:db (assoc-in db [:errors request-type] (get-in response [:response :errors]))  ;; save in db so that we can\n    :dispatch [:complete-request request-type]}))                                   ;; display it to the user\n"]}